<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Data Explorer</title>
    <link>https://suyoungjang.github.io/</link>
    
    <atom:link href="https://suyoungjang.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>기억 잡아두는 장소</description>
    <pubDate>Mon, 01 Mar 2021 11:25:54 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>TIL - Algorithm - adjacent element</title>
      <link>https://suyoungjang.github.io/2021/03/01/2021-03-01-algorithm-adjacent-element-check/</link>
      <guid>https://suyoungjang.github.io/2021/03/01/2021-03-01-algorithm-adjacent-element-check/</guid>
      <pubDate>Mon, 01 Mar 2021 11:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;알고리즘-지뢰찾기-문제를-풀다가-배운-것&quot;&gt;&lt;a href=&quot;#알고리즘-지뢰찾기-문제를-풀다가-배운-것&quot; class=&quot;headerlink&quot; title=&quot;알고리즘 지뢰찾기 문제를 풀다가 배운 것&quot;&gt;&lt;/a&gt;알고리즘 지뢰찾기 문제를 풀다가 배운</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="알고리즘-지뢰찾기-문제를-풀다가-배운-것"><a href="#알고리즘-지뢰찾기-문제를-풀다가-배운-것" class="headerlink" title="알고리즘 지뢰찾기 문제를 풀다가 배운 것"></a>알고리즘 지뢰찾기 문제를 풀다가 배운 것</h3><p>문제 출처: codesignal arcade intro 24</p><p>처음 접근은 반복문을 통해 현재 위치에서 +1 -1 해가며 주변에 지뢰가 있는지 확인했지만, 별도로 [-1, 0, 1] list를 loop에 넣어서 인근 element를 탐색하는 방법</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]:</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://suyoungjang.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://suyoungjang.github.io/tags/Algorithm/">Algorithm</category>
      
      
      <comments>https://suyoungjang.github.io/2021/03/01/2021-03-01-algorithm-adjacent-element-check/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>고객생애가치(Customer Lifetime Value)</title>
      <link>https://suyoungjang.github.io/2021/02/11/customer-lifetime-value/</link>
      <guid>https://suyoungjang.github.io/2021/02/11/customer-lifetime-value/</guid>
      <pubDate>Thu, 11 Feb 2021 13:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;고객생애가치-Customer-Lifetime-Value-란&quot;&gt;&lt;a href=&quot;#고객생애가치-Customer-Lifetime-Value-란&quot; class=&quot;headerlink&quot; title=&quot;고객생애가치 (Customer Lifetime Va</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="고객생애가치-Customer-Lifetime-Value-란"><a href="#고객생애가치-Customer-Lifetime-Value-란" class="headerlink" title="고객생애가치 (Customer Lifetime Value)란 ?"></a>고객생애가치 (Customer Lifetime Value)란 ?</h3><p>고객이 과거에 회사의 제품을 구매하거나 서비스 이용료로 지불했던 금액 또는 미래 예상 지불 금액을 기반으로 고객의 가치를 정의하는 것입니다. 즉, 단기적으로만 보지 않고 장기적 관점에서 고객의 가치를 평가하는 지표입니다.</p><h3 id="왜-중요할까"><a href="#왜-중요할까" class="headerlink" title="왜 중요할까?"></a>왜 중요할까?</h3><p>회사 입장에서는 모든 고객에게 집중할 수 없습니다. 그렇다면 고객 중에서도 회사 이익에 기여하는 부분이 큰 고객에게 집중하는 것이 비용대비 효율이 좋을 것입니다. </p><p>또한, 가치가 낮은 고객이 있다면 어떻게 하면 충성도를 높여서 가치가 높은 고객으로 전환 시킬지에 대한 아이디어도 얻을 수 있을 것입니다.</p><h3 id="CLV-계산방법"><a href="#CLV-계산방법" class="headerlink" title="CLV 계산방법"></a>CLV 계산방법</h3><p><a href="https://blog.performars.com/%EA%B5%AC%EB%8F%85%EA%B2%BD%EC%A0%9C-%EB%A7%88%EC%BC%80%ED%8C%85%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B3%A0%EA%B0%9D%EC%83%9D%EC%95%A0%EA%B0%80%EC%B9%98-%ED%99%9C%EC%9A%A9%EB%B2%95">원문</a></p><ul><li><strong>과거이력기반 (Historic)</strong><ul><li>개별 고객이 거래한 과거 구매 총가치 or 총이익의 합계 측정</li></ul></li></ul><blockquote><p>CLV(Historic) = (거래1 + 거래2 + 거래 3… + 거래 n) * 평균마진</p></blockquote><ul><li><strong>예측기반 (Predictive)</strong><ul><li>과거이력기반보다 더 많은 데이터를 사용하기 때문에 고객 생애주기 동안 회사에 제공할 총 가치를 나타내는 데 좋은 지표가 될 수 있음</li><li>가격, 할인 등의 변동을 고려할 때 정확한 예측을 결정하는 것은 어려울 수 있음</li></ul></li></ul><blockquote><p>CLV(Predictive) = ((월 평균 거래횟수 * 평균구매금액) * 평균 총마진) * 평균고객수명</p></blockquote><ul><li><p><strong>고객수명기반 (Lifespan)</strong></p><ul><li>고객가치와 고객 수명을 가지고 계산하는 방법</li><li>평균구매가치<ul><li>일정 기간 동안의 총 매출을 같은 기간 동안 발생한 구매 횟수로 나누기</li><li>총 매출 / 총 구매 횟수</li></ul></li><li>평균구매빈도<ul><li>위의 구매 횟수를 해당 기간 동안 구매한 고객수로 나누기</li><li>총 구매 횟수 / 총 구매 고객수</li></ul></li><li>평균고객가치<ul><li>평균구매가치 * 평균구매빈도</li></ul></li><li>평균고객수명<ul><li>고객들이 계속 구매하는 년 수의 평균값 계산</li></ul></li></ul><blockquote><p>CLV(Lifespan) = 평균고객가치 * 평균고객수명</p></blockquote></li><li><p><strong>동질집단기반 (Cohort)</strong></p><ul><li>유사한 특성을 가진 고객을 수집하고 그룹화함</li><li>여러 유형의 고객들 사이에서 결론을 도출하는데 유용함</li><li><img src="https://user-images.githubusercontent.com/35250329/107642142-d0a19f00-6cb7-11eb-9c5b-1ba8b2aa3c47.PNG" alt="cohort"></li></ul></li><li><p><strong>개인화기반 (Individual)</strong></p><ul><li><p>개인화된 CLV는 마케팅의 더 넓은 관점을 고려하는데 유용</p></li><li><p>이 CLV를 통해 어떤 마케팅 채널이 효율적인지, 누구를 타켓팅 해야하는지 등의 인사이트를 얻을 수 있음</p></li></ul></li></ul><h3 id="CLV-인사이트"><a href="#CLV-인사이트" class="headerlink" title="CLV 인사이트"></a>CLV 인사이트</h3><p><a href="https://www.andrewahn.co/marketing/customer-lifetime-value/">원문</a></p><ul><li>마케팅 활동을 통해 유치한 고객은 일반 고객들보다 CLV가 낮다<ul><li>마케팅 활동에 비용이 들어갔기 때문에 같은 질의 고객이어도 CLV가 낮음</li><li>마케팅 활동을 통해 수요가 창출된 고객은 고객 이탈율이 상대적으로 높음 <ul><li>e.g) 사은품으로 유입된 고객</li></ul></li></ul></li><li>제품 구입 빈도가 CLV에 가장 큰 영향을 끼친다<ul><li>제품 하나를 더 사게 하는 전략이 비싼 제품을 구입하게 하는 것보다 CLV 증가에 큰 효과가 있음</li></ul></li><li>같은 제품이라도 제품의 포지셔닝에 따라 CLV가 다르다<ul><li>고객의 의도에 맞게 마케팅을 하면 제품을 바꾸지 않고도 CLV를 바꿀 수 있음</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://suyoungjang.github.io/categories/Data-Analysis/">Data Analysis</category>
      
      
      <category domain="https://suyoungjang.github.io/tags/LTV/">LTV</category>
      
      <category domain="https://suyoungjang.github.io/tags/CLV/">CLV</category>
      
      <category domain="https://suyoungjang.github.io/tags/%EB%A7%88%EC%BC%80%ED%8C%85/">마케팅</category>
      
      
      <comments>https://suyoungjang.github.io/2021/02/11/customer-lifetime-value/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>카카오 맵 API를 활용한 좌표 &lt;-&gt; 주소 변환</title>
      <link>https://suyoungjang.github.io/2021/02/07/%EC%A3%BC%EC%86%8C%EC%A2%8C%ED%91%9C%EB%B3%80%ED%99%98/</link>
      <guid>https://suyoungjang.github.io/2021/02/07/%EC%A3%BC%EC%86%8C%EC%A2%8C%ED%91%9C%EB%B3%80%ED%99%98/</guid>
      <pubDate>Sun, 07 Feb 2021 13:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;API-활용-준비&quot;&gt;&lt;a href=&quot;#API-활용-준비&quot; class=&quot;headerlink&quot; title=&quot;API 활용 준비&quot;&gt;&lt;/a&gt;API 활용 준비&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://developers.kakao.com/&quot;&gt;ht</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="API-활용-준비"><a href="#API-활용-준비" class="headerlink" title="API 활용 준비"></a>API 활용 준비</h3><p><a href="https://developers.kakao.com/">https://developers.kakao.com</a></p><p>카카오 개발자 페이지에서 여러 카카오 제품의 API를 활용할 수 있는데, 그 중에서 좌표와 주소 변환 관련해서는 지도/로컬 제품을 사용하면 됩니다.</p><p>REST API 테스트 페이지에서는 어떤 기능을 어떻게 활용할 수 있는지 확인할 수 있습니다. 확인해 볼 기능은 좌표와 주소간 변환이니 아래 이미지의 노란색 2개를 확인해보겠습니다. </p><p><img src="https://user-images.githubusercontent.com/35250329/107147923-f0715400-6993-11eb-903d-8c24301c325e.PNG" alt="좌표변환"></p><h3 id="주소-gt-좌표-변환"><a href="#주소-gt-좌표-변환" class="headerlink" title="주소  -&gt; 좌표 변환"></a>주소  -&gt; 좌표 변환</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">KAKAO_REST_API_KEY = <span class="string">&#x27;&#x27;</span> <span class="comment"># 발급받은 API KEY</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_address_to_coordinates</span>(<span class="params">address</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    입력받은 주소를 WGS84 좌표계 좌표로 변환</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://dapi.kakao.com/v2/local/search/address.json?query=&#x27;</span> + address</span><br><span class="line">    header = &#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;KakaoAK &#x27;</span> + KAKAO_REST_API_KEY&#125;</span><br><span class="line"> </span><br><span class="line">    r = requests.get(url, headers=header)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        lng = <span class="built_in">float</span>(r.json()[<span class="string">&quot;documents&quot;</span>][<span class="number">0</span>][<span class="string">&quot;address&quot;</span>][<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">        lat = <span class="built_in">float</span>(r.json()[<span class="string">&quot;documents&quot;</span>][<span class="number">0</span>][<span class="string">&quot;address&quot;</span>][<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> lat, lng</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test</span></span><br><span class="line">convert_address_to_coordinates(<span class="string">&quot;서울특별시 강남구 강남대로 396&quot;</span>) <span class="comment"># 강남역 주소 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># (37.4981646510326, 127.028307900881)</span></span><br></pre></td></tr></table></figure><p>좌표가 맞는지 지도에 찍어봤는데, 강남역을 가리키고 있습니다.</p><p><img src="https://user-images.githubusercontent.com/35250329/107148449-6c6c9b80-6996-11eb-8377-348931b3a16a.PNG" alt="지도좌표검색"></p><h3 id="좌표-gt-주소-변환"><a href="#좌표-gt-주소-변환" class="headerlink" title="좌표 -&gt; 주소 변환"></a>좌표 -&gt; 주소 변환</h3><p>이번에는 좌표에서 주소로 변환해보겠습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_coordinates_to_address</span>(<span class="params">lat, lng</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    입력받은 위도, 경도를 도로명, 지번 주소로 변환</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    y, x = <span class="built_in">str</span>(lat), <span class="built_in">str</span>(lng)</span><br><span class="line">    url = <span class="string">&#x27;https://dapi.kakao.com/v2/local/geo/coord2address.json?x=&#123;&#125;&amp;y=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x, y)</span><br><span class="line">    header = &#123;<span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;KakaoAK &#x27;</span> + KAKAO_REST_API_KEY&#125;</span><br><span class="line"> </span><br><span class="line">    r = requests.get(url, headers=header)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        road_address = r.json()[<span class="string">&quot;documents&quot;</span>][<span class="number">0</span>][<span class="string">&quot;road_address&quot;</span>][<span class="string">&#x27;address_name&#x27;</span>]</span><br><span class="line">        bunji_address = r.json()[<span class="string">&quot;documents&quot;</span>][<span class="number">0</span>][<span class="string">&quot;address&quot;</span>][<span class="string">&#x27;address_name&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> road_address, bunji_address</span><br><span class="line"></span><br><span class="line"><span class="comment"># TEST</span></span><br><span class="line">convert_coordinates_to_address(<span class="number">37.4981646510326</span>, <span class="number">127.028307900881</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># (&#x27;서울특별시 강남구 강남대로 396&#x27;, &#x27;서울 강남구 역삼동 804&#x27;)</span></span><br></pre></td></tr></table></figure><p>이전에 강남역 좌표로 얻은 것을 다시 역지오코딩을 했을 때 강남역 주소가 나오는 것을 확인할 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://suyoungjang.github.io/categories/Python/">Python</category>
      
      <category domain="https://suyoungjang.github.io/categories/Python/GIS/">GIS</category>
      
      
      <category domain="https://suyoungjang.github.io/tags/Python/">Python</category>
      
      <category domain="https://suyoungjang.github.io/tags/GIS/">GIS</category>
      
      <category domain="https://suyoungjang.github.io/tags/API/">API</category>
      
      <category domain="https://suyoungjang.github.io/tags/%EC%A2%8C%ED%91%9C%EB%B3%80%ED%99%98/">좌표변환</category>
      
      
      <comments>https://suyoungjang.github.io/2021/02/07/%EC%A3%BC%EC%86%8C%EC%A2%8C%ED%91%9C%EB%B3%80%ED%99%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>User action 연속일수 구하기</title>
      <link>https://suyoungjang.github.io/2021/01/30/User-action-%EC%97%B0%EC%86%8D%EC%9D%BC%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0/</link>
      <guid>https://suyoungjang.github.io/2021/01/30/User-action-%EC%97%B0%EC%86%8D%EC%9D%BC%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sat, 30 Jan 2021 03:55:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;학생-연속-출석일수-구하기&quot;&gt;&lt;a href=&quot;#학생-연속-출석일수-구하기&quot; class=&quot;headerlink&quot; title=&quot;학생 연속 출석일수 구하기&quot;&gt;&lt;/a&gt;학생 연속 출석일수 구하기&lt;/h2&gt;&lt;p&gt;제가 학생 3명이 있는 학급을 관리하고 </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="학생-연속-출석일수-구하기"><a href="#학생-연속-출석일수-구하기" class="headerlink" title="학생 연속 출석일수 구하기"></a>학생 연속 출석일수 구하기</h2><p>제가 학생 3명이 있는 학급을 관리하고 있는 선생님이라고 가정해보겠습니다. </p><p>출석을 열심히 한 학생에게 상을 주고 싶은데, 특정 기간동안 많이 출석한 학생보다 연속적으로 오래 출석한 학생에게 상을 주고 싶습니다.</p><p>아래 데이터는 학생 3명의 2020-12-01 ~ 2020-12-05 5일간의 출석기록입니다.<br>DB에 아래 데이터가 있다고 가정하고 SQL을 이용해서 학생별로 연속출석일수를 구해보겠습니다.</p><p><strong>Table:</strong> Student</p><table><thead><tr><th>student_code</th><th>date</th><th>status</th></tr></thead><tbody><tr><td>A</td><td>2020-12-01</td><td>1</td></tr><tr><td>A</td><td>2020-12-02</td><td>0</td></tr><tr><td>A</td><td>2020-12-03</td><td>1</td></tr><tr><td>A</td><td>2020-12-04</td><td>0</td></tr><tr><td>A</td><td>2020-12-05</td><td>1</td></tr><tr><td>B</td><td>2020-12-01</td><td>1</td></tr><tr><td>B</td><td>2020-12-02</td><td>1</td></tr><tr><td>B</td><td>2020-12-03</td><td>1</td></tr><tr><td>B</td><td>2020-12-04</td><td>0</td></tr><tr><td>B</td><td>2002-12-05</td><td>0</td></tr><tr><td>C</td><td>2020-12-01</td><td>1</td></tr><tr><td>C</td><td>2020-12-02</td><td>1</td></tr><tr><td>C</td><td>2020-12-03</td><td>0</td></tr><tr><td>C</td><td>2020-12-04</td><td>1</td></tr><tr><td>C</td><td>2020-12-05</td><td>1</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> student_attendance <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        student_code</span><br><span class="line">        , <span class="built_in">date</span></span><br><span class="line">        , <span class="keyword">status</span></span><br><span class="line">        , row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> student_code <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">date</span>) s_rownum</span><br><span class="line">        , row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> student_code, <span class="keyword">status</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">date</span>) s_t_rownum</span><br><span class="line">    <span class="keyword">FROM</span> student</span><br><span class="line">), student_consecutive_days <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        student_code</span><br><span class="line">        , <span class="built_in">date</span></span><br><span class="line">        , <span class="keyword">status</span></span><br><span class="line">        , (rn1 - rn2) <span class="keyword">as</span> grp</span><br><span class="line">        , <span class="keyword">min</span>(<span class="built_in">date</span>) <span class="keyword">as</span> start_date</span><br><span class="line">        , <span class="keyword">max</span>(<span class="built_in">date</span>) <span class="keyword">as</span> end_date</span><br><span class="line">        , <span class="keyword">count</span>(*) <span class="keyword">as</span> consecutive_days</span><br><span class="line">    <span class="keyword">FROM</span> student_attendance</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> student_code, <span class="keyword">status</span>, grp</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> student_code, start_date</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">student_code</span><br><span class="line">, <span class="keyword">max</span>(consecutive_days) <span class="comment"># 가장 길었던 연속일수</span></span><br><span class="line"><span class="keyword">FROM</span> student_consecutive_days</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">status</span> = <span class="number">1</span> <span class="comment"># 출석했던 구간 중</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> student_code</span><br></pre></td></tr></table></figure><h3 id="SQL-설명"><a href="#SQL-설명" class="headerlink" title="SQL 설명"></a>SQL 설명</h3><p>student_attendance 라는 가상 table을 만듭니다. 기존 data에서 출석여부별 연속기간을 구하기 위해 row nuber를 붙이는데<br>여기서 student_code를 partition으로 하는 row number와 (student_code, status) 를 partition을 하는 row number 두개가 필요합니다.</p><p> <strong>Why?</strong></p><p>첫 번째 row number는 학생마다 날짜순서대로 붙게됩니다. 두 번째 row number는 status가 추가적으로 partiton 되어있기 때문에<br>학생의 날짜, 출석여부 별로 row number가 붙게됩니다. 즉, 연속적으로 출석하지 않은 시점에 row number 1과 row number 2의 차이가 발생하게 됩니다.  그러면 이 차이가 똑같은 구간은 똑같은 상태가 지속되고 있음을 나타내게 됩니다. </p><p>학생의 출석 상태별 연속되는 구간 Table을 만들고 난 후, 마지막으로 출석상태인 구간만 filtering 하여 max 연속일수를 구하면<br>학생별로 기간 내 가장 길었던 연속일수를 구할 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://suyoungjang.github.io/categories/SQL/">SQL</category>
      
      
      <category domain="https://suyoungjang.github.io/tags/SQL/">SQL</category>
      
      
      <comments>https://suyoungjang.github.io/2021/01/30/User-action-%EC%97%B0%EC%86%8D%EC%9D%BC%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Open Source Routing Machine (OSRM) with Python</title>
      <link>https://suyoungjang.github.io/2021/01/24/Open-Source-Routing-Machine-OSRM-with-Python/</link>
      <guid>https://suyoungjang.github.io/2021/01/24/Open-Source-Routing-Machine-OSRM-with-Python/</guid>
      <pubDate>Sun, 24 Jan 2021 14:35:39 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;OSRM-최적의-경로-찾기&quot;&gt;&lt;a href=&quot;#OSRM-최적의-경로-찾기&quot; class=&quot;headerlink&quot; title=&quot;OSRM 최적의 경로 찾기&quot;&gt;&lt;/a&gt;OSRM 최적의 경로 찾기&lt;/h2&gt;&lt;p&gt;Open Source Routing Ma</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="OSRM-최적의-경로-찾기"><a href="#OSRM-최적의-경로-찾기" class="headerlink" title="OSRM 최적의 경로 찾기"></a>OSRM 최적의 경로 찾기</h2><p>Open Source Routing Machine (OSRM)은 지도상의 도로 Network에서 최단 경로를 계산하는 C ++ 라우팅 엔진입니다.</p><p>지도상의 포인트 A와 포인트 B 사이의 거리를 구하는 가장 쉬운 방법은 직선거리를 계산하는 것입니다.</p><p>그러나 직선거리로 계산하게되면 도로 상황을 무시해서 실제 이동거리와 많은 차이가 발생할 수 있는데, 이 OSRM API를 활용하면 네이버 길찾기처럼 경로, 소요시간, 이동거리 등과 같은 값을 얻을 수 있어서 유용합니다.</p><p><img src="https://user-images.githubusercontent.com/35250329/105631874-f5aea900-5e93-11eb-9cd5-ffcf897c411a.PNG" alt="OSRM"></p><h2 id="API-Document"><a href="#API-Document" class="headerlink" title="API Document"></a>API Document</h2><p>API Document를 보면 Nearest, Route, Trip등 다양한 Service가 있는데, 이 중에서 Route service를 활용해보려고 합니다.</p><p><img src="https://user-images.githubusercontent.com/35250329/105632039-9309dd00-5e94-11eb-85b4-67d1b81820fe.PNG" alt="OSRM API Doc"></p><h2 id="신도림역-gt-문래역-Route"><a href="#신도림역-gt-문래역-Route" class="headerlink" title="신도림역 -&gt; 문래역 Route"></a>신도림역 -&gt; 문래역 Route</h2><ul><li>이동수단도 선택이 가능한데 아래에서는 bike로 설정<ul><li>car, bike, foot</li></ul></li><li>route는 map에서 그리기 용이한 형태로 저장</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> folium</span><br><span class="line"><span class="keyword">import</span> polyline</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_route</span>(<span class="params">origin_lon, origin_lat, dest_lon, dest_lat</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;출발지, 도착지 좌표를 입력해서 Route 정보 Return&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    loc = <span class="string">&quot;&#123;&#125;,&#123;&#125;;&#123;&#125;,&#123;&#125;&quot;</span>.<span class="built_in">format</span>(origin_lon, origin_lat, dest_lon, dest_lat)</span><br><span class="line">    url = <span class="string">&quot;http://router.project-osrm.org/route/v1/bike/&quot;</span></span><br><span class="line">    r = requests.get(url + loc) </span><br><span class="line">    <span class="keyword">if</span> r.status_code!= <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">    res = r.json()   </span><br><span class="line">    routes = polyline.decode(res[<span class="string">&#x27;routes&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;geometry&#x27;</span>])</span><br><span class="line">    start_point = [res[<span class="string">&#x27;waypoints&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;location&#x27;</span>][<span class="number">1</span>], res[<span class="string">&#x27;waypoints&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;location&#x27;</span>][<span class="number">0</span>]]</span><br><span class="line">    end_point = [res[<span class="string">&#x27;waypoints&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;location&#x27;</span>][<span class="number">1</span>], res[<span class="string">&#x27;waypoints&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;location&#x27;</span>][<span class="number">0</span>]]</span><br><span class="line">    distance = res[<span class="string">&#x27;routes&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;distance&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    route = &#123;<span class="string">&#x27;route&#x27;</span>:routes,</span><br><span class="line">           <span class="string">&#x27;start_point&#x27;</span>:start_point,</span><br><span class="line">           <span class="string">&#x27;end_point&#x27;</span>:end_point,</span><br><span class="line">           <span class="string">&#x27;distance&#x27;</span>:distance</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> route</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">origin_lon, origin_lat, dest_lon, dest_lat = <span class="number">126.890975</span>,<span class="number">37.508767</span>,<span class="number">126.89472929779438</span>, <span class="number">37.51792066883597</span></span><br><span class="line">test_route = get_route(pickup_lon, pickup_lat, dropoff_lon, dropoff_lat)</span><br></pre></td></tr></table></figure><h3 id="print-test-route"><a href="#print-test-route" class="headerlink" title="print(test_route)"></a>print(test_route)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;route&#39;: [(37.50901, 126.89072),</span><br><span class="line">  (37.50918, 126.89083),</span><br><span class="line">  (37.50932, 126.89135),</span><br><span class="line">  (37.50992, 126.89262),</span><br><span class="line">  (37.51094, 126.89181),</span><br><span class="line">  (37.51198, 126.89393),</span><br><span class="line">  (37.51315, 126.89728),</span><br><span class="line">  (37.51476, 126.89392),</span><br><span class="line">  (37.51491, 126.89407),</span><br><span class="line">  (37.51792, 126.89477)],</span><br><span class="line"> &#39;start_point&#39;: [37.50901, 126.890723],</span><br><span class="line"> &#39;end_point&#39;: [37.517916, 126.894771],</span><br><span class="line"> &#39;distance&#39;: 1584.2&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_map</span>(<span class="params">route</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;출발지, 도착지, route 정보를 folium map에 표시&quot;&quot;&quot;</span></span><br><span class="line">    route_map = folium.Map(location=[(route[<span class="string">&#x27;start_point&#x27;</span>][<span class="number">0</span>] + route[<span class="string">&#x27;end_point&#x27;</span>][<span class="number">0</span>])/<span class="number">2</span>, </span><br><span class="line">                             (route[<span class="string">&#x27;start_point&#x27;</span>][<span class="number">1</span>] + route[<span class="string">&#x27;end_point&#x27;</span>][<span class="number">1</span>])/<span class="number">2</span>], </span><br><span class="line">                   zoom_start=<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">    folium.PolyLine(</span><br><span class="line">        route[<span class="string">&#x27;route&#x27;</span>],</span><br><span class="line">        weight=<span class="number">8</span>,</span><br><span class="line">        color=<span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">        opacity=<span class="number">0.6</span></span><br><span class="line">    ).add_to(route_map)</span><br><span class="line"></span><br><span class="line">    folium.Marker(</span><br><span class="line">        location=route[<span class="string">&#x27;start_point&#x27;</span>],</span><br><span class="line">        icon=folium.Icon(icon=<span class="string">&#x27;play&#x27;</span>, color=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    ).add_to(route_map)</span><br><span class="line"></span><br><span class="line">    folium.Marker(</span><br><span class="line">        location=route[<span class="string">&#x27;end_point&#x27;</span>],</span><br><span class="line">        icon=folium.Icon(icon=<span class="string">&#x27;stop&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    ).add_to(route_map)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> route_map</span><br></pre></td></tr></table></figure><h2 id="Route-시각화"><a href="#Route-시각화" class="headerlink" title="Route 시각화"></a>Route 시각화</h2><p>신도림역 -&gt; 문래역 Route가 map에 잘 표현된 걸 확인할 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/35250329/105633539-7d98b100-5e9c-11eb-9d98-9a98b4ca249c.PNG" alt="OSRM API TEST"></p>]]></content:encoded>
      
      
      <category domain="https://suyoungjang.github.io/categories/Python/">Python</category>
      
      <category domain="https://suyoungjang.github.io/categories/Python/GIS/">GIS</category>
      
      
      <category domain="https://suyoungjang.github.io/tags/Python/">Python</category>
      
      <category domain="https://suyoungjang.github.io/tags/GIS/">GIS</category>
      
      <category domain="https://suyoungjang.github.io/tags/OSRM/">OSRM</category>
      
      
      <comments>https://suyoungjang.github.io/2021/01/24/Open-Source-Routing-Machine-OSRM-with-Python/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Book - 틀리지 않는 법</title>
      <link>https://suyoungjang.github.io/2021/01/17/%ED%8B%80%EB%A6%AC%EC%A7%80%EC%95%8A%EB%8A%94%EB%B2%95/</link>
      <guid>https://suyoungjang.github.io/2021/01/17/%ED%8B%80%EB%A6%AC%EC%A7%80%EC%95%8A%EB%8A%94%EB%B2%95/</guid>
      <pubDate>Sun, 17 Jan 2021 02:29:08 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Book-틀리지-않는-법&quot;&gt;&lt;a href=&quot;#Book-틀리지-않는-법&quot; class=&quot;headerlink&quot; title=&quot;Book - 틀리지 않는 법&quot;&gt;&lt;/a&gt;Book - 틀리지 않는 법&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://user</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Book-틀리지-않는-법"><a href="#Book-틀리지-않는-법" class="headerlink" title="Book - 틀리지 않는 법"></a>Book - 틀리지 않는 법</h2><p><img src="https://user-images.githubusercontent.com/35250329/104829663-3ff2c180-58b9-11eb-951a-0ec300d39113.PNG" alt="틀리지 않는 법"></p><p>지금까지 읽었던 Data science 관련 교양서 중 가장 두꺼운 책입니다. (총 페이지가 무려 614p..)</p><p>블로그, 커뮤니티에서 추천하는 걸 보고 구매했는데 모든 내용을 다 이해하지는 못했지만 앞으로 업무하면서 충분히 도움이 될 만한 내용들이 많아서 만족했습니다. 책의 어떤 내용들은 읽었을 때에는 당연한 얘기일 수도 있어 보이지만 일을 하다보면 간과하기 쉬운 부분이기도 했습니다. </p><h2 id="프롤로그"><a href="#프롤로그" class="headerlink" title="프롤로그"></a>프롤로그</h2><h3 id="어떤-가정을-품고-있는가-그-가정은-정당한가"><a href="#어떤-가정을-품고-있는가-그-가정은-정당한가" class="headerlink" title="어떤 가정을 품고 있는가? 그 가정은 정당한가?"></a>어떤 가정을 품고 있는가? 그 가정은 정당한가?</h3><p>전쟁에서 총알구멍이 아군의 비행기에서 한 대당 두 개 이상 절대 발견되지 않는다면?</p><p>-&gt; 조종사들이 적의 포화를 피하는 데 뛰어난 것이 아니라 두 번 이상 맞은 비행기는 돌아오지 못했다는 것</p><h2 id="선형성"><a href="#선형성" class="headerlink" title="선형성"></a>선형성</h2><h3 id="같은-계산을-다른-방식으로-여러-차례-반복했을-때-다른-답이-나온다면-문제가-있다"><a href="#같은-계산을-다른-방식으로-여러-차례-반복했을-때-다른-답이-나온다면-문제가-있다" class="headerlink" title="같은 계산을 다른 방식으로 여러 차례 반복했을 때, 다른 답이 나온다면 문제가 있다."></a>같은 계산을 다른 방식으로 여러 차례 반복했을 때, 다른 답이 나온다면 문제가 있다.</h3><ul><li>비례를 잘못사용해서 해석할 경우<ul><li>어떤 술집이 문 닫을 시각까지 남아 있던 두 남자 중 한 명이 다른 한명을 폭행<ul><li>이것이 곧 미국인 50%가 폭행을 당한 격이라고 말할 수 없는 것</li></ul></li></ul></li><li>Volumn과 Ratio를 문제 상황에 맞게 활용</li></ul><h3 id="큰-수의-법칙"><a href="#큰-수의-법칙" class="headerlink" title="큰 수의 법칙"></a>큰 수의 법칙</h3><ul><li>이미 벌어진 일에 대해서 균형을 맞추는 것이 아니라, 비율로 따져서 과거의 횟수가 무시해도 좋을 만큼 작아질 때까지 새로운 데이터를 더함으로써 이미 벌어진 일을 희석</li></ul><h2 id="추론"><a href="#추론" class="headerlink" title="추론"></a>추론</h2><h3 id="인간은-패턴이-없는-곳에서도-패턴을-읽어-내고-실제-패턴이-있을-때에는-그-힘을-과대평가하는-경향이-있다"><a href="#인간은-패턴이-없는-곳에서도-패턴을-읽어-내고-실제-패턴이-있을-때에는-그-힘을-과대평가하는-경향이-있다" class="headerlink" title="인간은 패턴이 없는 곳에서도 패턴을 읽어 내고 실제 패턴이 있을 때에는 그 힘을 과대평가하는 경향이 있다."></a>인간은 패턴이 없는 곳에서도 패턴을 읽어 내고 실제 패턴이 있을 때에는 그 힘을 과대평가하는 경향이 있다.</h3><h3 id="P-value-해킹"><a href="#P-value-해킹" class="headerlink" title="P-value 해킹"></a>P-value 해킹</h3><ul><li>저널의 다양한 분야를 조사한 결과, P-value 그래프는 기준인 0.05로 다가갈수록 눈에 띄게 상승</li><li>발표 불가능한 실험 결과 중 다수가 저자의 의도로 경계선 너머 허용할 수준으로 넘어왔다는 추론 가능</li></ul><h3 id="판사가-아니라-탐정"><a href="#판사가-아니라-탐정" class="headerlink" title="판사가 아니라 탐정"></a>판사가 아니라 탐정</h3><ul><li>p-value와 더불어 신뢰 구간 같이 보기</li><li>신뢰 구간은 실제 관찰한 결과에 합리적으로 부합하는 가설들의 범위를 말함<ul><li>신뢰 구간이 [3%, 17%]라면 효과가 양성이긴 하지만 그렇게 까지 크진 않다는 것</li><li>But, [9%, 11%]라면 효과가 양성일 뿐 아니라 상당이 크다는 것을 암시</li></ul></li></ul><h3 id="회귀"><a href="#회귀" class="headerlink" title="회귀"></a>회귀</h3><h3 id="상관관계와-정보량간의-관계"><a href="#상관관계와-정보량간의-관계" class="headerlink" title="상관관계와 정보량간의 관계"></a>상관관계와 정보량간의 관계</h3><ul><li>측정 항목들 간의 상관관계가 더 클수록 분류된 데이터의 정보량은 작아짐<ul><li>즉 Segment할 때에는 상관관계가 적은 변수로 해야 의미가 있음</li></ul></li></ul><h3 id="상관관계가-없다고-해서-연관성이-없는-것이-아니다"><a href="#상관관계가-없다고-해서-연관성이-없는-것이-아니다" class="headerlink" title="상관관계가 없다고 해서 연관성이 없는 것이 아니다"></a>상관관계가 없다고 해서 연관성이 없는 것이 아니다</h3><ul><li>골턴의 상관관계 개념은 한 변수가 증가하면 다른 변수도 그에 비례하여 증가하거나 감소하는 선형적 관계만 감지<ul><li>But, 모든 관계가 선형적 관계는 아님</li></ul></li><li>수학적 도구는 특정 종류희 현상은 감지하지만 다른 종류는 감지하지 못함</li><li>상관관계가 없다는 말은 상관 계수가 감지할 수 있는 종류의 관계가 없다는 뜻일 뿐</li></ul><h2 id="에필로그"><a href="#에필로그" class="headerlink" title="에필로그"></a>에필로그</h2><h3 id="기대값"><a href="#기대값" class="headerlink" title="기대값"></a>기대값</h3><ul><li> 기대값은 우리가 기대하는 값이 아니라, 가능한 결과들에 대한 확률적 타협</li></ul>]]></content:encoded>
      
      
      <category domain="https://suyoungjang.github.io/categories/Book/">Book</category>
      
      
      <category domain="https://suyoungjang.github.io/tags/Book/">Book</category>
      
      <category domain="https://suyoungjang.github.io/tags/Data-Science/">Data Science</category>
      
      
      <comments>https://suyoungjang.github.io/2021/01/17/%ED%8B%80%EB%A6%AC%EC%A7%80%EC%95%8A%EB%8A%94%EB%B2%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TIL - Pyhton &#39;list&#39; object has no attribute &#39;split&#39;</title>
      <link>https://suyoungjang.github.io/2021/01/09/split/</link>
      <guid>https://suyoungjang.github.io/2021/01/09/split/</guid>
      <pubDate>Sat, 09 Jan 2021 06:37:27 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;구글링하면서 임기응변식으로 Python을 사용하고 학습하게 되었을 때 이런 부분들에서 약점이 생기는 것 같습니다.&lt;/p&gt;
&lt;p&gt;위 제목의 에러가 발생하게 된 원인은 list에 split 메소드를 사용했기 때문인데, split 메소를 어떻게 써야하</description>
        
      
      
      
      <content:encoded><![CDATA[<p>구글링하면서 임기응변식으로 Python을 사용하고 학습하게 되었을 때 이런 부분들에서 약점이 생기는 것 같습니다.</p><p>위 제목의 에러가 발생하게 된 원인은 list에 split 메소드를 사용했기 때문인데, split 메소를 어떻게 써야하는지 document를 보면서 짚고 넘어가려고 합니다.</p><h2 id="Error-Message"><a href="#Error-Message" class="headerlink" title="Error Message"></a>Error Message</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;list&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;split&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><p><img src="https://user-images.githubusercontent.com/35250329/104085413-985f0900-5292-11eb-8986-2663aa7f3765.PNG" alt="str split"></p><p>첫 문구에 string의 word를 list형태로 return해준다고 나와있습니다. 즉, list에 직접 split 메소드를 쓸 수 없고 list안에 있는 문자열을 순회하면서 사용하면 됩니다.</p>]]></content:encoded>
      
      
      <category domain="https://suyoungjang.github.io/categories/TIL/">TIL</category>
      
      
      <category domain="https://suyoungjang.github.io/tags/Python/">Python</category>
      
      <category domain="https://suyoungjang.github.io/tags/TIL/">TIL</category>
      
      
      <comments>https://suyoungjang.github.io/2021/01/09/split/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
